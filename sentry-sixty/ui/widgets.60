import { Theme } from "theme.60";
import { ScrollView } from "sixtyfps_widgets.60";

export SentryNormalButton := Rectangle {
    callback clicked <=> touch_area.clicked;
    property<string> text;
    property<bool> pressed: self.enabled && touch_area.pressed;
    property<bool> enabled <=> touch_area.enabled;

    border_width: 1px;
    border_radius: 4px;
    border_color: self.pressed ? Theme.outline_active : (touch_area.has_hover ? Theme.outline_hover : Theme.outline_default);
    background: Theme.background_primary;

    animate background { duration: 100ms; }
    horizontal-stretch: 0;
    vertical-stretch: 0;

    HorizontalLayout {
        padding-top: 12px;
        padding-bottom: 12px;
        padding-left: 16px;
        padding-right: 16px;

        Text {
            text: root.text;
            font-weight: 600;
            font-size: 14px;
            horizontal-alignment: center;
            vertical-alignment: center;
        }
    }

    touch_area := TouchArea {
        width: root.width;
        height: root.height;
    }
}

export SentryAccentButton := Rectangle {
    callback clicked <=> touch_area.clicked;
    property<string> text;
    property<bool> pressed: self.enabled && touch_area.pressed;
    property<bool> enabled <=> touch_area.enabled;

    border_width: 1px;
    border_radius: 4px;
    border_color: self.pressed ? Theme.outline_active : (touch_area.has_hover ? Theme.outline_hover : Theme.outline_default);
    background: self.pressed ? Theme.accent_active : (touch_area.has_hover ? Theme.accent_hover : Theme.accent_default);

    animate background { duration: 100ms; }
    horizontal-stretch: 0;
    vertical-stretch: 0;

    HorizontalLayout {
        padding-top: 12px;
        padding-bottom: 12px;
        padding-left: 16px;
        padding-right: 16px;

        Text {
            text: root.text;
            font-weight: 600;
            font-size: 14px;
            color: white;
            horizontal-alignment: center;
            vertical-alignment: center;
        }
    }

    touch_area := TouchArea {
        width: root.width;
        height: root.height;
    }
}

export MultilineEdit := Rectangle {
    property <string> text;
    property <string> placeholder_text;
    property <bool> has_focus: input.has_focus;
    property <bool> enabled <=> input.enabled;
    callback accepted(string);
    callback edited(string);
    forward-focus: input;

    //border_color: root.has_focus ? Theme.highlight_background : #ffffff;
    border_radius: 1px;
    border_width: 2px;
    horizontal-stretch: 1;
    vertical-stretch: 0;

    GridLayout {
        padding: 3px;

        Rectangle {
            border_color: #ecedeb;
            border_radius: 1px;
            border_width: 1px;
            background: white;
            height: 50px;

            GridLayout {
                padding: 3px;
                input := TextInput {
                    text <=> root.text;
                    accepted => {
                        root.accepted(self.text);
                    }
                    edited => {
                        root.edited(self.text);
                    }
                    //color: enabled ? Theme.text_color : Theme.text_color_disabled;
                }
                Text {
                    //color: Theme.placeholder_text;
                    col: 0;
                    row: 0;
                    text: (root.text == "" && !input.has-focus) ? root.placeholder_text : "";
                }
            }
        }

    }
}

//VerticalScrollView := Rectangle {
//    property <length> viewport-width <=> fli.viewport-width;
//    property <length> viewport-height <=> fli.viewport-height;
//    property <length> viewport-x <=> fli.viewport-x;
//    property <length> viewport-y <=> fli.viewport-y;
//    property <length> visible-width <=> fli.width;
//    property <length> visible-height <=> fli.height;
//    min-height: 50px;
//    min-width: 50px;
//    horizontal-stretch: 1;
//    vertical-stretch: 1;
//
//    fli := Flickable {
//        @children
//        x: 1px;
//        y: 1px;
//        interactive: false;
//        viewport-y <=> vbar.value;
//        viewport-x: 0;
//        viewport-height: 1000px;
//        viewport-width: 1000px;
//        width: parent.width - vbar.width - 1px;
//        height: parent.height - 1px;
//    }
//    vbar := ScrollBar {
//        width: 16px;
//        x: fli.width + fli.x;
//        height: fli.height + fli.y;
//        horizontal: false;
//        max: fli.viewport-height - fli.height;
//        page-size: fli.height;
//    }
//}

export FileBox := Rectangle {
    property<string> file_name;
    property<string> file_contents;
    property<string> show_button_text;
    property<string> hide_button_text;
    property<bool> is_expanded: false;

    border_width: 1px;
    border_radius: 4px;

    border_color: Theme.outline_active;
    background: Theme.background_secondary;

    VerticalLayout {
        if (is_expanded): contents := ScrollView {
            min_height: 200px;
            VerticalLayout {
            padding_top: 8px;
            padding_bottom: 8px;
            padding_left: 16px;
            padding_right: 16px;
            width: parent.width;
            
            Text {
                //background: Theme.background_primary;
                text: root.file_contents;
                font_size: 14px;
                font_weight: 400;
                wrap: word_wrap;
                width: parent.width;
            }
        }
}
        HorizontalLayout {
            padding_top: 8px;
            padding_bottom: 8px;
            padding_left: 16px;
            padding_right: 16px;

            Text {
                font-weight: 400;
                font-size: 14px;
                text: root.file_name;
                vertical_alignment: center;
            }
            Rectangle {
                horizontal_stretch: 1;
            }
            button := SentryNormalButton {
                background: Theme.background_secondary;
                text: root.is_expanded ? root.hide_button_text : root.show_button_text;
                clicked => {root.is_expanded = !root.is_expanded;}
            }    
        }
    }
}
